type: http_service
uri: "/"
name: To-dos
data:
  id: "?http-service-id?"
  version: 1.0.0
  name: To-dos
  description: "![](https://i.ibb.co/v3Yt03v/todo-api-background.png)\n## U0001F4AB
    Overview\nTo Do API provides a simple way for people to manage their tasks and
    plan their day. This API can be used to create mobile and web applications.This
    API is documented using **OpenAPI 3.0**. The implementation lives in this [GitHub
    repo](https://github.com/stoplightio/studio-demo/blob/master/reference/todos/todo.v1.yaml).\n###
    U0001F9F0 Cross-Origin Resource Sharing This API features Cross-Origin Resource
    Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
    CORS support is necessary to make calls from the request maker within the API
    docs.\n### U0001F3C1 Trying out your own API Specification Elements can be used
    to generate API docs for any OpenAPI document. Replace this OpenAPI with a URL
    to your own OpenAPI document to get started. "
  contact:
    name: Stoplight Support
    email: support@stoplight.io
    url: https://www.stoplight.io
  license:
    url: https://spdx.org/licenses/MIT
    name: MIT
  termsOfService: https://stoplight.io/terms/
  servers:
  - name: To-dos
    description: Production
    url: https://todos.stoplight.io
  - name: To-dos
    description: Sandbox
    url: https://todos-sandbox.stoplight.io
  securitySchemes:
  - key: API Key
    description: Just use `123`. It's super secure ;)
    type: apiKey
    name: apikey
    in: query
  tags:
  - name: Todos
tags:
- Todos
children:
- type: http_operation
  uri: "/operations/get-todos"
  data:
    id: "?http-operation-id?"
    iid: get-todos
    description: |-
      Returns a list of todos

      *Markdown is supported in descriptions. Add information here for users to get accustomed to endpoints*
    method: get
    path: "/todos"
    summary: List Todos
    responses:
    - code: '200'
      description: Returns a list of Todos
      headers: []
      contents:
      - mediaType: application/json
        schema:
          type: array
          items:
            "$ref": "#/components/schemas/Todos"
          "$schema": http://json-schema.org/draft-07/schema#
        examples:
        - key: List of Todos
          value:
          - id: 0
            name: my todo
            completed: true
            completed_at: '2019-08-24T14:15:22Z'
            created_at: '2019-08-24T14:15:22Z'
            updated_at: '2019-08-24T14:15:22Z'
          - id: 1
            name: another todo
            completed: false
            completed_at: '2019-08-24T14:15:22Z'
            created_at: '2019-08-24T14:15:22Z'
            updated_at: '2019-08-24T14:15:22Z'
          - id: 2
            name: yet another todo
            completed: false
            completed_at: '2019-08-24T14:15:22Z'
            created_at: '2019-08-24T14:15:22Z'
            updated_at: '2019-08-24T14:15:22Z'
        encodings: []
    - code: '403'
      description: Action not allowed
      headers: []
      contents:
      - mediaType: application/json
        schema:
          type: object
          properties:
            message:
              type: string
          required:
          - message
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    - code: '404'
      description: Resource not found
      headers: []
      contents:
      - mediaType: application/json
        schema:
          title: Error
          type: object
          description: A standard error object.
          x-tags:
          - Common
          properties:
            status:
              type: string
              description: A code.
            error:
              type: string
          required:
          - status
          - error
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    servers:
    - description: Production
      url: https://todos.stoplight.io
    - description: Sandbox
      url: https://todos-sandbox.stoplight.io
    request:
      body:
        contents: []
      headers:
      - name: Content-Type
        required: true
        description: application/json
        schema:
          type: string
          default: application/json
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
      query:
      - name: limit
        description: Return a limited set of results *I'm a shared parameter. I can
          be reused in multiple endpoints!*
        schema:
          type: number
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
      cookie: []
      path: []
    tags: []
    security: []
    extensions: {}
  name: List Todos
  tags: []
- type: http_operation
  uri: "/operations/post-todos"
  data:
    id: "?http-operation-id?"
    iid: post-todos
    description: |-
      This creates a Todo object

      *Markdown is supported in descriptions. Add information here for users to get accustomed to endpoints*
    method: post
    path: "/todos"
    summary: Create Todo
    responses:
    - code: '201'
      description: New Todo Created
      headers: []
      contents:
      - mediaType: multipart/form-data
        schema:
          description: I'm a model's description.
          type: object
          x-examples: {}
          title: Todo
          properties:
            id:
              type: number
              minimum: 0
              maximum: 9999
              description: ID of the task
              readOnly: true
            name:
              type: string
              minLength: 1
              maxLength: 100
              description: Name of the task
            completed:
              type: boolean
              default: false
              description: Boolean indicating if the task has been completed or not
            completed_at:
              type: string
              format: date-time
              description: Time when the task was completed
              readOnly: true
            created_at:
              type: string
              format: date-time
              description: Time when the task was created
              readOnly: true
            updated_at:
              type: string
              format: date-time
              description: Time when the task was updated
              readOnly: true
          required:
          - id
          - name
          - completed_at
          - created_at
          - updated_at
          "$schema": http://json-schema.org/draft-07/schema#
        examples:
        - key: Example Todo
          value:
            id: 0
            name: string
            completed: true
            completed_at: '2019-08-24T14:15:22Z'
            created_at: '2019-08-24T14:15:22Z'
            updated_at: '2019-08-24T14:15:22Z'
        encodings: []
    - code: '403'
      description: Action not allowed
      headers: []
      contents:
      - mediaType: application/json
        schema:
          type: object
          properties:
            message:
              type: string
          required:
          - message
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    - code: '404'
      description: Resource not found
      headers: []
      contents:
      - mediaType: application/json
        schema:
          title: Error
          type: object
          description: A standard error object.
          x-tags:
          - Common
          properties:
            status:
              type: string
              description: A code.
            error:
              type: string
          required:
          - status
          - error
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    servers:
    - description: Production
      url: https://todos.stoplight.io
    - description: Sandbox
      url: https://todos-sandbox.stoplight.io
    request:
      body:
        description: Name of the Todo
        contents:
        - mediaType: application/json
          schema:
            description: I'm a model's description.
            type: object
            x-examples: {}
            title: Todo
            properties:
              id:
                type: number
                minimum: 0
                maximum: 9999
                description: ID of the task
                readOnly: true
              name:
                type: string
                minLength: 1
                maxLength: 100
                description: Name of the task
              completed:
                type: boolean
                default: false
                description: Boolean indicating if the task has been completed or
                  not
              completed_at:
                type: string
                format: date-time
                description: Time when the task was completed
                readOnly: true
              created_at:
                type: string
                format: date-time
                description: Time when the task was created
                readOnly: true
              updated_at:
                type: string
                format: date-time
                description: Time when the task was updated
                readOnly: true
            required:
            - id
            - name
            - completed_at
            - created_at
            - updated_at
            "$schema": http://json-schema.org/draft-07/schema#
          examples: []
          encodings: []
      headers:
      - name: Content-Type
        required: true
        description: application/json
        schema:
          type: string
          default: application/json
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
      query: []
      cookie: []
      path: []
    tags: []
    security:
    - - key: API Key
        description: Just use `123`. It's super secure ;)
        type: apiKey
        name: apikey
        in: query
    extensions: {}
  name: Create Todo
  tags: []
- type: http_operation
  uri: "/operations/get-todos-id"
  data:
    id: "?http-operation-id?"
    iid: get-todos-id
    description: |-
      Get a single todo using an ID

      *Markdown is supported in descriptions. Add information here for users to get accustomed to endpoints*
    method: get
    path: "/todos/{id}"
    summary: Get Todo
    responses:
    - code: '200'
      description: Returns the Todo for the ID
      headers: []
      contents:
      - mediaType: application/json
        schema:
          description: I'm a model's description.
          type: object
          x-examples: {}
          title: Todo
          properties:
            id:
              type: number
              minimum: 0
              maximum: 9999
              description: ID of the task
              readOnly: true
            name:
              type: string
              minLength: 1
              maxLength: 100
              description: Name of the task
            completed:
              type: boolean
              default: false
              description: Boolean indicating if the task has been completed or not
            completed_at:
              type: string
              format: date-time
              description: Time when the task was completed
              readOnly: true
            created_at:
              type: string
              format: date-time
              description: Time when the task was created
              readOnly: true
            updated_at:
              type: string
              format: date-time
              description: Time when the task was updated
              readOnly: true
          required:
          - id
          - name
          - completed_at
          - created_at
          - updated_at
          "$schema": http://json-schema.org/draft-07/schema#
        examples:
        - key: Example Todo
          value:
            id: 0
            name: string
            completed: true
            completed_at: '2019-08-24T14:15:22Z'
            created_at: '2019-08-24T14:15:22Z'
            updated_at: '2019-08-24T14:15:22Z'
        encodings: []
    - code: '403'
      description: Action not allowed
      headers: []
      contents:
      - mediaType: application/json
        schema:
          type: object
          properties:
            message:
              type: string
          required:
          - message
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    - code: '404'
      description: Resource not found
      headers: []
      contents:
      - mediaType: application/json
        schema:
          title: Error
          type: object
          description: A standard error object.
          x-tags:
          - Common
          properties:
            status:
              type: string
              description: A code.
            error:
              type: string
          required:
          - status
          - error
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    servers:
    - description: Production
      url: https://todos.stoplight.io
    - description: Sandbox
      url: https://todos-sandbox.stoplight.io
    request:
      body:
        contents: []
      headers: []
      query: []
      cookie: []
      path:
      - name: id
        required: true
        description: ID of the Todo
        schema:
          type: string
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
    tags: []
    security: []
    extensions: {}
  name: Get Todo
  tags: []
- type: http_operation
  uri: "/operations/put-todos-id"
  data:
    id: "?http-operation-id?"
    iid: put-todos-id
    description: |-
      Update a single todo using an ID

      *Markdown is supported in descriptions. Add information here for users to get accustomed to endpoints*
    method: put
    path: "/todos/{id}"
    summary: Replace Todo
    responses:
    - code: '200'
      description: Todo Updated
      headers: []
      contents: []
    - code: '403'
      description: Action not allowed
      headers: []
      contents:
      - mediaType: application/json
        schema:
          type: object
          properties:
            message:
              type: string
          required:
          - message
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    - code: '404'
      description: Resource not found
      headers: []
      contents:
      - mediaType: application/json
        schema:
          title: Error
          type: object
          description: A standard error object.
          x-tags:
          - Common
          properties:
            status:
              type: string
              description: A code.
            error:
              type: string
          required:
          - status
          - error
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    servers:
    - description: Production
      url: https://todos.stoplight.io
    - description: Sandbox
      url: https://todos-sandbox.stoplight.io
    request:
      body:
        description: ''
        contents:
        - mediaType: application/json
          schema:
            description: I'm a model's description.
            type: object
            x-examples: {}
            title: Todo
            properties:
              id:
                type: number
                minimum: 0
                maximum: 9999
                description: ID of the task
                readOnly: true
              name:
                type: string
                minLength: 1
                maxLength: 100
                description: Name of the task
              completed:
                type: boolean
                default: false
                description: Boolean indicating if the task has been completed or
                  not
              completed_at:
                type: string
                format: date-time
                description: Time when the task was completed
                readOnly: true
              created_at:
                type: string
                format: date-time
                description: Time when the task was created
                readOnly: true
              updated_at:
                type: string
                format: date-time
                description: Time when the task was updated
                readOnly: true
            required:
            - id
            - name
            - completed_at
            - created_at
            - updated_at
            "$schema": http://json-schema.org/draft-07/schema#
          examples: []
          encodings: []
      headers:
      - name: Content-Type
        required: true
        description: application/json
        schema:
          type: string
          default: application/json
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
      query: []
      cookie: []
      path:
      - name: id
        required: true
        description: ID of the Todo
        schema:
          type: string
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
    tags: []
    security:
    - - key: API Key
        description: Just use `123`. It's super secure ;)
        type: apiKey
        name: apikey
        in: query
    extensions: {}
  name: Replace Todo
  tags: []
- type: http_operation
  uri: "/operations/delete-todos-id"
  data:
    id: "?http-operation-id?"
    iid: delete-todos-id
    description: |-
      Delete a todo using an ID

      *Markdown is supported in descriptions. Add information here for users to get accustomed to endpoints*
    method: delete
    path: "/todos/{id}"
    summary: Delete Todo
    responses:
    - code: '200'
      description: Todo Deleted
      headers: []
      contents:
      - mediaType: application/json
        schema:
          description: I'm a model's description.
          type: object
          x-examples: {}
          title: Todo
          properties:
            id:
              type: number
              minimum: 0
              maximum: 9999
              description: ID of the task
              readOnly: true
            name:
              type: string
              minLength: 1
              maxLength: 100
              description: Name of the task
            completed:
              type: boolean
              default: false
              description: Boolean indicating if the task has been completed or not
            completed_at:
              type: string
              format: date-time
              description: Time when the task was completed
              readOnly: true
            created_at:
              type: string
              format: date-time
              description: Time when the task was created
              readOnly: true
            updated_at:
              type: string
              format: date-time
              description: Time when the task was updated
              readOnly: true
          required:
          - id
          - name
          - completed_at
          - created_at
          - updated_at
          "$schema": http://json-schema.org/draft-07/schema#
        examples:
        - key: Example Todo
          value:
            id: 0
            name: string
            completed: true
            completed_at: '2019-08-24T14:15:22Z'
            created_at: '2019-08-24T14:15:22Z'
            updated_at: '2019-08-24T14:15:22Z'
        encodings: []
    - code: '403'
      description: Action not allowed
      headers: []
      contents:
      - mediaType: application/json
        schema:
          type: object
          properties:
            message:
              type: string
          required:
          - message
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    - code: '404'
      description: Resource not found
      headers: []
      contents:
      - mediaType: application/json
        schema:
          title: Error
          type: object
          description: A standard error object.
          x-tags:
          - Common
          properties:
            status:
              type: string
              description: A code.
            error:
              type: string
          required:
          - status
          - error
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    servers:
    - description: Production
      url: https://todos.stoplight.io
    - description: Sandbox
      url: https://todos-sandbox.stoplight.io
    request:
      body:
        contents: []
      headers: []
      query: []
      cookie: []
      path:
      - name: id
        required: true
        description: ID of the Todo
        schema:
          type: string
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
    tags: []
    security:
    - - key: API Key
        description: Just use `123`. It's super secure ;)
        type: apiKey
        name: apikey
        in: query
    extensions: {}
  name: Delete Todo
  tags: []
- type: http_operation
  uri: "/operations/patch-todos-id"
  data:
    id: "?http-operation-id?"
    iid: patch-todos-id
    description: |-
      Don't use this endpoint. Notice it's deprecated.

      *Markdown is supported in descriptions. Add information here for users to get accustomed to endpoints*
    deprecated: true
    method: patch
    path: "/todos/{id}"
    summary: Update Todo
    responses:
    - code: '200'
      description: Todo Updated
      headers: []
      contents: []
    - code: '403'
      description: Action not allowed
      headers: []
      contents:
      - mediaType: application/json
        schema:
          type: object
          properties:
            message:
              type: string
          required:
          - message
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    - code: '404'
      description: Resource not found
      headers: []
      contents:
      - mediaType: application/json
        schema:
          title: Error
          type: object
          description: A standard error object.
          x-tags:
          - Common
          properties:
            status:
              type: string
              description: A code.
            error:
              type: string
          required:
          - status
          - error
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    servers:
    - description: Production
      url: https://todos.stoplight.io
    - description: Sandbox
      url: https://todos-sandbox.stoplight.io
    request:
      body:
        contents:
        - mediaType: application/json
          schema:
            description: I'm a model's description.
            type: object
            x-examples: {}
            title: Todo
            properties:
              id:
                type: number
                minimum: 0
                maximum: 9999
                description: ID of the task
                readOnly: true
              name:
                type: string
                minLength: 1
                maxLength: 100
                description: Name of the task
              completed:
                type: boolean
                default: false
                description: Boolean indicating if the task has been completed or
                  not
              completed_at:
                type: string
                format: date-time
                description: Time when the task was completed
                readOnly: true
              created_at:
                type: string
                format: date-time
                description: Time when the task was created
                readOnly: true
              updated_at:
                type: string
                format: date-time
                description: Time when the task was updated
                readOnly: true
            required:
            - id
            - name
            - completed_at
            - created_at
            - updated_at
            "$schema": http://json-schema.org/draft-07/schema#
          examples: []
          encodings: []
      headers: []
      query: []
      cookie: []
      path:
      - name: id
        required: true
        description: ID of the Todo
        schema:
          type: string
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
    tags: []
    security:
    - - key: API Key
        description: Just use `123`. It's super secure ;)
        type: apiKey
        name: apikey
        in: query
    extensions: {}
  name: Update Todo
  tags: []
- type: http_operation
  uri: "/operations/get-users"
  data:
    id: "?http-operation-id?"
    iid: get-users
    description: |-
      Get a user by ID

      *Markdown is supported in descriptions. Add information here for users to get accustomed to endpoints*
    method: get
    path: "/users"
    summary: Get User
    responses:
    - code: '200'
      description: OK
      headers: []
      contents:
      - mediaType: application/json
        schema:
          type: array
          items:
            "$ref": "#/components/schemas/User"
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    - code: '404'
      description: Resource not found
      headers: []
      contents:
      - mediaType: application/json
        schema:
          title: Error
          type: object
          description: A standard error object.
          x-tags:
          - Common
          properties:
            status:
              type: string
              description: A code.
            error:
              type: string
          required:
          - status
          - error
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    servers:
    - description: Production
      url: https://todos.stoplight.io
    - description: Sandbox
      url: https://todos-sandbox.stoplight.io
    request:
      body:
        contents: []
      headers:
      - name: Content-Type
        required: true
        description: application/json
        schema:
          type: string
          default: application/json
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
      query: []
      cookie: []
      path: []
    tags:
    - name: Users
    security: []
    extensions: {}
  name: Get User
  tags:
  - Users
- type: http_operation
  uri: "/operations/delete-users-userID"
  data:
    id: "?http-operation-id?"
    iid: delete-users-userID
    description: Delete a user by ID
    method: delete
    path: "/users"
    summary: Delete User
    responses:
    - code: '200'
      description: OK
      headers: []
      contents:
      - mediaType: application/json
        schema:
          description: ''
          type: object
          title: User
          properties:
            userId:
              type: number
              description: ID of the user
              readOnly: true
            firstName:
              type: string
              minLength: 1
              description: ''
            lastName:
              type: string
              minLength: 1
              description: ''
            phoneNumber:
              type: string
              minLength: 1
              description: Official Phone Number
            emailAddress:
              type: string
              minLength: 1
              description: Work Email Address
          required:
          - userId
          - firstName
          - lastName
          - phoneNumber
          - emailAddress
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
        encodings: []
    servers:
    - description: Production
      url: https://todos.stoplight.io
    - description: Sandbox
      url: https://todos-sandbox.stoplight.io
    request:
      body:
        contents: []
      headers: []
      query: []
      cookie: []
      path: []
    tags:
    - name: Users
    security:
    - - key: API Key
        description: Just use `123`. It's super secure ;)
        type: apiKey
        name: apikey
        in: query
    extensions: {}
  name: Delete User
  tags:
  - Users
- type: http_operation
  uri: "/operations/post-users-userID"
  data:
    id: "?http-operation-id?"
    iid: post-users-userID
    description: Create a User
    method: post
    path: "/users"
    summary: Create User
    responses:
    - code: '201'
      description: User Created
      headers: []
      contents:
      - mediaType: application/json
        schema:
          description: ''
          type: object
          title: User
          properties:
            userId:
              type: number
              description: ID of the user
              readOnly: true
            firstName:
              type: string
              minLength: 1
              description: ''
            lastName:
              type: string
              minLength: 1
              description: ''
            phoneNumber:
              type: string
              minLength: 1
              description: Official Phone Number
            emailAddress:
              type: string
              minLength: 1
              description: Work Email Address
          required:
          - userId
          - firstName
          - lastName
          - phoneNumber
          - emailAddress
          "$schema": http://json-schema.org/draft-07/schema#
        examples:
        - key: Example User
          value:
            userId: 2
            firstName: racks
            lastName: jacson
            phoneNumber: '123456'
            emailAddress: racks.jacson@learningcontainer.com
        encodings: []
    servers:
    - description: Production
      url: https://todos.stoplight.io
    - description: Sandbox
      url: https://todos-sandbox.stoplight.io
    request:
      body:
        contents:
        - mediaType: application/json
          schema:
            description: ''
            type: object
            title: User
            properties:
              userId:
                type: number
                description: ID of the user
                readOnly: true
              firstName:
                type: string
                minLength: 1
                description: ''
              lastName:
                type: string
                minLength: 1
                description: ''
              phoneNumber:
                type: string
                minLength: 1
                description: Official Phone Number
              emailAddress:
                type: string
                minLength: 1
                description: Work Email Address
            required:
            - userId
            - firstName
            - lastName
            - phoneNumber
            - emailAddress
            "$schema": http://json-schema.org/draft-07/schema#
          examples: []
          encodings: []
      headers:
      - name: Content-Type
        required: true
        description: application/json
        schema:
          type: string
          default: application/json
          "$schema": http://json-schema.org/draft-07/schema#
        examples: []
      query: []
      cookie: []
      path: []
    tags:
    - name: Users
    security:
    - - key: API Key
        description: Just use `123`. It's super secure ;)
        type: apiKey
        name: apikey
        in: query
    extensions: {}
  name: Create User
  tags:
  - Users
- type: model
  uri: "/schemas/Todos"
  data:
    description: I'm a model's description.
    type: object
    x-examples: {}
    title: Todo
    properties:
      id:
        type: number
        minimum: 0
        maximum: 9999
        description: ID of the task
        readOnly: true
      name:
        type: string
        minLength: 1
        maxLength: 100
        description: Name of the task
      completed:
        type: boolean
        default: false
        description: Boolean indicating if the task has been completed or not
      completed_at:
        type: string
        format: date-time
        description: Time when the task was completed
        readOnly: true
      created_at:
        type: string
        format: date-time
        description: Time when the task was created
        readOnly: true
      updated_at:
        type: string
        format: date-time
        description: Time when the task was updated
        readOnly: true
    required:
    - id
    - name
    - completed_at
    - created_at
    - updated_at
  name: Todo
  tags: []
- type: model
  uri: "/schemas/User"
  data:
    description: ''
    type: object
    title: User
    properties:
      userId:
        type: number
        description: ID of the user
        readOnly: true
      firstName:
        type: string
        minLength: 1
        description: ''
      lastName:
        type: string
        minLength: 1
        description: ''
      phoneNumber:
        type: string
        minLength: 1
        description: Official Phone Number
      emailAddress:
        type: string
        minLength: 1
        description: Work Email Address
    required:
    - userId
    - firstName
    - lastName
    - phoneNumber
    - emailAddress
  name: User
  tags: []
components:
  schemas:
    Todos:
      description: I'm a model's description.
      type: object
      x-examples: {}
      title: Todo
      properties:
        id:
          type: number
          minimum: 0
          maximum: 9999
          description: ID of the task
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the task
        completed:
          type: boolean
          default: false
          description: Boolean indicating if the task has been completed or not
        completed_at:
          type: number
          format: date-time
          description: Time when the task was completed
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: Time when the task was created
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Time when the task was updated
          readOnly: true
      required:
        - id
        - name
        - completed_at
        - created_at
        - updated_at
    User:
      description: ''
      type: object
      title: User
      properties:
        userId:
          type: number
          description: ID of the user
          readOnly: true
        firstName:
          type: string
          minLength: 1
          description: ''
        lastName:
          type: string
          minLength: 1
          description: ''
        phoneNumber:
          type: string
          minLength: 1
          description: Official Phone Number
        emailAddress:
          type: string
          minLength: 1
          description: Work Email Address
      required:
        - userId
        - firstName
        - lastName
        - phoneNumber
        - emailAddress

    todo:
      value:
        id: 0
        name: string
        completed: true
        completed_at: '2019-08-24T14:15:22Z'
        created_at: '2019-08-24T14:15:22Z'
        updated_at: '2019-08-24T14:15:22Z'
    multiple-todos:
      value:
        - id: 0
          name: my todo
          completed: true
          completed_at: '2019-08-24T14:15:22Z'
          created_at: '2019-08-24T14:15:22Z'
          updated_at: '2019-08-24T14:15:22Z'
        - id: 1
          name: another todo
          completed: false
          completed_at: '2019-08-24T14:15:22Z'
          created_at: '2019-08-24T14:15:22Z'
          updated_at: '2019-08-24T14:15:22Z'
        - id: 2
          name: yet another todo
          completed: false
          completed_at: '2019-08-24T14:15:22Z'
          created_at: '2019-08-24T14:15:22Z'
          updated_at: '2019-08-24T14:15:22Z'
    user:
      value:
        userId: 2
        firstName: racks
        lastName: jacson
        phoneNumber: '123456'
        emailAddress: racks.jacson@learningcontainer.com